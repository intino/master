def type(entity & decorable)
	package $package.entities;

	public class $name+FirstUpperCase extends Abstract$name+FirstUpperCase {

		public $name+FirstUpperCase(String id, $package.MasterClient master) {
			super(id, master);
		}
	}
end

def type(entity & class)
	package $package.entities;

	import io.intino.master.model.Triple;

	import java.util.List;
	import java.util.HashMap;
    import java.util.Map;
    import java.util.function.BiConsumer;

	public[ $isAbstract+firstLowerCase] class $abstract~$name+FirstUpperCase extends $parent {

		private $package.MasterClient master;

		[$attribute+wordDeclaration...[$NL]]
		[$attribute+field...[$NL]]

		public $abstract~$name+FirstUpperCase(String id, $package.MasterClient master) {
			$parent+super
			this.master = master;
		}

		[$attribute+getter...[$NL$NL]]

		public $name+FirstUpperCase add(Triple triple) {
			switch(triple.predicate()) {
				[$attribute+set...[$NL]]
				default:
				 super.add(triple);
				 break;
			}
			return ($name+FirstUpperCase) this;
		}

		public $name+FirstUpperCase remove(Triple triple) {
			switch(triple.predicate()) {
				[$attribute+set...[$NL]]
				default:
				super.remove(triple);
				break;
			}
			return ($name+FirstUpperCase) this;
		}

		[public List<Triple> asTriples() {
			final java.util.ArrayList<Triple> triples = new java.util.ArrayList<>();
			$attribute+asTriple...[$NL]
			super.extraAttributes().entrySet().stream().map(e -> new Triple(id().get(), e.getKey(), e.getValue())).forEach(triples::add);
			return triples;
		}]
    }
end

def attribute(this:io.intino.master.model.Entity) trigger(super)
	super(id);
end

def trigger(super)
	super(id, master);
end

def type(boolean) trigger(set)
	case "$name":
	 	this.$name+firstLowerCase = triple.value() == null ? null : Boolean.parseBoolean(triple.value());
	 	break;
end

def type(integer) trigger(set)
	case "$name":
		this.$name+firstLowerCase = triple.value() == null ? null : Integer.parseInt(triple.value());
		break;
end

def type(real) trigger(set)
	case "$name":
		this.$name+firstLowerCase = triple.value() == null ? null : Double.parseDouble(triple.value());
		break;
end

def type(long) trigger(set)
	case "$name":
		this.$name+firstLowerCase = triple.value() == null ? null : Long.parseLong(triple.value());
		break;
end

def type(word) trigger(set)
	case "$name":
		this.$name+firstLowerCase = triple.value() == null ? null : $type+firstUpperCase.valueOf(triple.value());
		break;
end

def type(string) trigger(set)
	case "$name":
		this.$name+firstLowerCase = triple.value();
		break;
end

def type(entity) trigger(set)
	case "$name":
		this.$name+firstLowerCase~Reference = triple.value();
		break;
end

def type(date) trigger(set)
	case "$name":
		this.$name+firstLowerCase = java.time.LocalDate.parse(triple.value(), java.time.format.DateTimeFormatter.ofPattern("$format"));
		break;
end

def type(datetime) trigger(set)
	case "$name":
		this.$name+firstLowerCase = java.time.LocalDateTime.parse(triple.value(), java.time.format.DateTimeFormatter.ofPattern("$format"));
		break;
end

def type(instant) trigger(set)
	case "$name":
		this.$name+firstLowerCase = java.time.Instant.ofEpochMilli(Long.parseLong(triple.value()));
		break;
end

def type(map) trigger(set)
	case "$name":
		this.$name+firstLowerCase = triple.value() == null ? null : java.util.Arrays.stream(triple.value().split(";"))
			.map(e -> e.split("="))
			.collect(java.util.stream.Collectors.toMap(e -> e[0].trim(), e -> e[1].trim()));
		break;
end

def type(struct) trigger(set)
	case "$name": {
		if (triple.value() == null) {
			this.$name+firstLowerCase = null;
		} else {
			List<String> values = java.util.Arrays.stream(triple.value().split(",", -1)).map(v -> v.trim()).collect(java.util.stream.Collectors.toList());
			this.$name+firstLowerCase = triple.value() == null ? null : $struct+call;
		}
		break;
	}
end


def type(word) trigger(asTriple)
	triples.add(new Triple(id().get(), "$name+firstLowerCase", $name+firstLowerCase.name()));
end

def type(entity) trigger(asTriple)
	triples.add(new Triple(id().get(), "$name+firstLowerCase", String.valueOf($name+firstLowerCase~Reference)));
end

def type(date | datetime) trigger(asTriple)
	triples.add(new Triple(id().get(), "$name+firstLowerCase", $name+firstLowerCase~.format(java.time.format.DateTimeFormatter.ofPattern("$format"))));
end

def type(instant) trigger(asTriple)
	triples.add(new Triple(id().get(), "$name+firstLowerCase", String.valueOf($name+firstLowerCase~.toEpochMilli())));
end

def trigger(asTriple)
	triples.add(new Triple(id().get(), "$name+firstLowerCase", String.valueOf($name+firstLowerCase)));
end

def type(word) trigger(wordDeclaration)
	public enum $name+firstUpperCase {$value...[, ]}
end

def type(struct) trigger(field)
	protected $package.structs.$struct+structName $name+firstLowerCase[ = $defaultValue];
end

def type(entity) trigger(field)
	protected String $name+firstLowerCase~Reference;
end

def type(date) trigger(field)
	protected java.time.LocalDate $name+firstLowerCase;
end

def type(datetime) trigger(field)
	protected java.time.LocalDateTime $name+firstLowerCase;
end

def type(instant) trigger(field)
	protected java.time.Instant $name+firstLowerCase;
end

def !type(entity) trigger(field)
	protected $type $name+firstLowerCase[ = $defaultValue];
end

def type(word) trigger(defaultValue)
	$type.$value
end

def trigger(defaultValue)
	$value
end

def type(struct) trigger(getter)
	public $package.structs.$struct+structName $name+firstLowerCase() {
		return this.$name+firstLowerCase;
	}
end


def type(entity) trigger(getter)
	public $entity+firstUpperCase $name+firstLowerCase() {
		return master.$entity+firstLowerCase($name+firstLowerCase~Reference);
	}
end

def type(date) trigger(getter)
	public java.time.LocalDate $name+firstLowerCase() {
		return this.$name+firstLowerCase;
	}
end

def type(datetime) trigger(getter)
	public java.time.LocalDateTime $name+firstLowerCase() {
		return this.$name+firstLowerCase;
	}
end

def type(instant) trigger(getter)
	public java.time.Instant $name+firstLowerCase() {
		return this.$name+firstLowerCase;
	}
end

def trigger(getter)
	public $type $name+firstLowerCase() {
		return $name+firstLowerCase;
	}
end

def trigger(abstract)
	Abstract
end

def trigger(structName)
	$name+firstUpperCase
end

def trigger(call)
	new $package.structs.$name+firstUpperCase($attribute+parse...[, ])
end

def type(boolean) trigger(parse)
	Boolean.parseBoolean(values.get($index))
end

def type(int) trigger(parse)
	Integer.parseInt(values.get($index))
end

def type(double) trigger(parse)
	Double.parseDouble(values.get($index))
end

def type(date) trigger(parse)
	java.time.LocalDate.parse(values.get($index));
end

def type(datetime) trigger(parse)
	java.time.LocalDateTime.parse(values.get($index));
end

def type(instant) trigger(parse)
	java.time.Instant.parse(values.get($index));
end

def trigger(parse)
	values.get($index)
end