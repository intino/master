def type(entity & decorable)
	package $package.entities;

	public class $name+FirstUpperCase extends Abstract$name+FirstUpperCase {
		public $name+FirstUpperCase(String id, $package.Master master) {
			super(id, master);
		}
	}
end

def type(entity & class)
	package $package.entities;

	import io.intino.master.model.Triple;

	import java.util.List;
	import java.util.HashMap;
    import java.util.Map;
    import java.util.function.BiConsumer;

	public[ $isAbstract+firstLowerCase] class $abstract~$name+FirstUpperCase extends $parent {
		private static final Map<String, BiConsumer<$name+FirstUpperCase, Triple>> setters = new HashMap<>() {{
			[$attribute+set...[$NL]]
		}};
		private $package.Master master;

		[$attribute+wordDeclaration...[$NL]]
		[$attribute+field...[$NL]]

		public $abstract~$name+FirstUpperCase(String id, $package.Master master) {
			$parent+super
			this.master = master;
		}

		[$attribute+getter...[$NL$NL]]

		public $name+FirstUpperCase add(Triple triple) {
			final BiConsumer<$name+FirstUpperCase, Triple> consumer = setters.get(triple.predicate());
			if (consumer != null) consumer.accept(($name+FirstUpperCase) this, triple);
			else super.add(triple);
			return ($name+FirstUpperCase) this;
		}

		public $name+FirstUpperCase remove(Triple triple) {
			final BiConsumer<$name+FirstUpperCase, Triple> consumer = setters.get(triple.predicate());
			if (consumer != null) consumer.accept(($name+FirstUpperCase) this, new Triple(triple.subject(), triple.predicate(), null));
			else super.remove(triple);
			return ($name+FirstUpperCase) this;
		}

		public List<Triple> asTriples() {
			final java.util.ArrayList<Triple> triples = new java.util.ArrayList<>();
			$attribute+asTriple...[$NL]
			return triples;
		}
    }
end

def attribute(this:io.intino.master.model.Entity) trigger(super)
	super(id);
end

def trigger(super)
	super(id, master);
end

def type(boolean) trigger(set)
	put("$name", ($owner+firstLowerCase, t) -> $owner+firstLowerCase.$name+firstLowerCase = t.value() == null ? null : Boolean.parseBoolean(t.value()));
end

def type(integer) trigger(set)
	put("$name", ($owner+firstLowerCase, t) -> $owner+firstLowerCase.$name+firstLowerCase = t.value() == null ? null : Integer.parseInt(t.value()));
end

def type(real) trigger(set)
	put("$name", ($owner+firstLowerCase, t) -> $owner+firstLowerCase.$name+firstLowerCase = t.value() == null ? null : Double.parseDouble(t.value()));
end

def type(long) trigger(set)
	put("$name", ($owner+firstLowerCase, t) -> $owner+firstLowerCase.$name+firstLowerCase = t.value() == null ? null : Long.parseLong(t.value()));
end

def type(word) trigger(set)
	put("$name", ($owner+firstLowerCase, t) -> $owner+firstLowerCase.$name+firstLowerCase = t.value() == null ? null : $type+firstUpperCase.valueOf(t.value()));
end

def type(string) trigger(set)
	put("$name", ($owner+firstLowerCase, t) -> $owner+firstLowerCase.$name+firstLowerCase = t.value());
end

def type(entity) trigger(set)
	put("$name", ($owner+firstLowerCase, t) -> $owner+firstLowerCase.$name+firstLowerCase~Reference = t.value());
end

def type(struct) trigger(set)
	put("$name", ($owner+firstLowerCase, t) -> {
		if (t.value() == null) $owner+firstLowerCase.$name+firstLowerCase = null;
		else {
			List<String> values = java.util.Arrays.stream(t.value().split(",", -1)).map(v -> v.trim()).collect(java.util.stream.Collectors.toList());
			$owner+firstLowerCase.$name+firstLowerCase = t.value() == null ? null : $struct+call;
		}
	});
end


def type(word) trigger(asTriple)
	triples.add(new Triple(id() + ":$owner+lowercase", "$name+firstLowerCase", $name+firstLowerCase.name()));
end

def type(entity) trigger(asTriple)
	triples.add(new Triple(id() + ":$owner+lowercase", "$name+firstLowerCase", String.valueOf($name+firstLowerCase~Reference)));
end

def trigger(asTriple)
	triples.add(new Triple(id() + ":$owner+lowercase", "$name+firstLowerCase", String.valueOf($name+firstLowerCase)));
end

def type(word) trigger(wordDeclaration)
	public enum $name+firstUpperCase {$value...[, ]}
end

def type(struct) trigger(field)
	protected $package.structs.$struct+structName $name+firstLowerCase[ = $defaultValue];
end

def type(entity) trigger(field)
	protected String $name+firstLowerCase~Reference;
end

def !type(entity) trigger(field)
	protected $type $name+firstLowerCase[ = $defaultValue];
end

def type(word) trigger(defaultValue)
	$type.$value
end

def trigger(defaultValue)
	$value
end

def type(struct) trigger(getter)
	public $package.structs.$struct+structName $name+firstLowerCase() {
		return this.$name+firstLowerCase;
	}
end


def type(entity) trigger(getter)
	public $entity+firstUpperCase $name+firstLowerCase() {
		return master.$entity+firstLowerCase($name+firstLowerCase~Reference);
	}
end

def trigger(getter)
	public $type $name+firstLowerCase() {
		return $name+firstLowerCase;
	}
end


def trigger(abstract)
	Abstract
end

def trigger(structName)
	$name+firstUpperCase
end

def trigger(call)
	new $package.structs.$name+firstUpperCase($attribute+parse...[, ])
end

def type(boolean) trigger(parse)
	Boolean.parseBoolean(values.get($index))
end

def type(int) trigger(parse)
	Integer.parseInt(values.get($index))
end

def type(double) trigger(parse)
	Double.parseDouble(values.get($index))
end

def trigger(parse)
	values.get($index)
end