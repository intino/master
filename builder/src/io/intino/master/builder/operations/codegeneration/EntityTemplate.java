package io.intino.master.builder.operations.codegeneration;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class EntityTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((allTypes("entity","decorable"))).output(literal("package ")).output(mark("package")).output(literal(".entities;\n\npublic class ")).output(mark("name", "FirstUpperCase")).output(literal(" extends Abstract")).output(mark("name", "FirstUpperCase")).output(literal(" {\n\tpublic ")).output(mark("name", "FirstUpperCase")).output(literal("(String id, ")).output(mark("package")).output(literal(".Master master) {\n\t\tsuper(id, master);\n\t}\n}")),
			rule().condition((allTypes("entity","class"))).output(literal("package ")).output(mark("package")).output(literal(".entities;\n\nimport io.intino.master.model.Triple;\n\nimport java.util.List;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.BiConsumer;\n\npublic")).output(expression().output(literal(" ")).output(mark("abstract", "firstLowerCase"))).output(literal(" class ")).output(mark("abstract")).output(mark("name", "FirstUpperCase")).output(literal(" extends io.intino.master.model.Entity {\n\tprivate static final Map<String, BiConsumer<")).output(mark("name", "FirstUpperCase")).output(literal(", Triple>> setters = new HashMap<>() {{\n\t\t")).output(expression().output(mark("attribute", "set").multiple("\n"))).output(literal("\n\t}};\n\tprivate ")).output(mark("package")).output(literal(".Master master;\n\n\t")).output(expression().output(mark("attribute", "wordDeclaration").multiple("\n"))).output(literal("\n\t")).output(expression().output(mark("attribute", "field").multiple("\n"))).output(literal("\n\n\tpublic ")).output(mark("abstract")).output(mark("name", "FirstUpperCase")).output(literal("(String id, ")).output(mark("package")).output(literal(".Master master) {\n\t\tsuper(id);\n\t\tthis.master = master;\n\t}\n\n\t")).output(mark("attribute", "getter").multiple("\n\n")).output(literal("\n\n\tpublic ")).output(mark("name", "FirstUpperCase")).output(literal(" add(Triple triple) {\n\t\tsetters.getOrDefault(triple.predicate(), (")).output(mark("name", "firstLowerCase")).output(literal(", t) -> ")).output(mark("name", "firstLowerCase")).output(literal(".attributes.put(t.predicate(), t.value()))\n\t\t\t\t.accept((")).output(mark("name", "FirstUpperCase")).output(literal(") this, triple);\n\t\treturn (")).output(mark("name", "FirstUpperCase")).output(literal(") this;\n\t}\n\n\tpublic ")).output(mark("name", "FirstUpperCase")).output(literal(" remove(Triple triple) {\n\t\tsetters.getOrDefault(triple.predicate(), (")).output(mark("name", "firstLowerCase")).output(literal(", t) -> ")).output(mark("name", "firstLowerCase")).output(literal(".attributes.put(t.predicate(), null))\n\t\t\t\t.accept((")).output(mark("name", "FirstUpperCase")).output(literal(") this, null);\n\t\treturn (")).output(mark("name", "FirstUpperCase")).output(literal(") this;\n\t}\n}")),
			rule().condition((type("boolean")), (trigger("set"))).output(literal("put(\"")).output(mark("name")).output(literal("\", (")).output(mark("owner", "firstLowerCase")).output(literal(", t) -> ")).output(mark("owner", "firstLowerCase")).output(literal(".")).output(mark("name", "firstLowerCase")).output(literal(" = t.value() == null ? null : Boolean.parseBoolean(t.value()));")),
			rule().condition((type("integer")), (trigger("set"))).output(literal("put(\"")).output(mark("name")).output(literal("\", (")).output(mark("owner", "firstLowerCase")).output(literal(", t) -> ")).output(mark("owner", "firstLowerCase")).output(literal(".")).output(mark("name", "firstLowerCase")).output(literal(" = t.value() == null ? null : Integer.parseInt(t.value()));")),
			rule().condition((type("real")), (trigger("set"))).output(literal("put(\"")).output(mark("name")).output(literal("\", (")).output(mark("owner", "firstLowerCase")).output(literal(", t) -> ")).output(mark("owner", "firstLowerCase")).output(literal(".")).output(mark("name", "firstLowerCase")).output(literal(" = t.value() == null ? null : Double.parseDouble(t.value()));")),
			rule().condition((type("long")), (trigger("set"))).output(literal("put(\"")).output(mark("name")).output(literal("\", (")).output(mark("owner", "firstLowerCase")).output(literal(", t) -> ")).output(mark("owner", "firstLowerCase")).output(literal(".")).output(mark("name", "firstLowerCase")).output(literal(" = t.value() == null ? null : Long.parseLong(t.value()));")),
			rule().condition((type("word")), (trigger("set"))).output(literal("put(\"")).output(mark("name")).output(literal("\", (")).output(mark("owner", "firstLowerCase")).output(literal(", t) -> ")).output(mark("owner", "firstLowerCase")).output(literal(".")).output(mark("name", "firstLowerCase")).output(literal(" = t.value() == null ? null : ")).output(mark("type", "firstUpperCase")).output(literal(".valueOf(t.value()));")),
			rule().condition((type("string")), (trigger("set"))).output(literal("put(\"")).output(mark("name")).output(literal("\", (")).output(mark("owner", "firstLowerCase")).output(literal(", t) -> ")).output(mark("owner", "firstLowerCase")).output(literal(".")).output(mark("name", "firstLowerCase")).output(literal(" = t.value());")),
			rule().condition((type("struct")), (trigger("set"))).output(literal("put(\"")).output(mark("name")).output(literal("\", (")).output(mark("owner", "firstLowerCase")).output(literal(", t) -> {\n\tif (t.value() == null) ")).output(mark("owner", "firstLowerCase")).output(literal(".")).output(mark("name", "firstLowerCase")).output(literal(" = null;\n\telse {\n\t\tList<String> values = java.util.Arrays.stream(t.value().split(\",\", -1)).map(v -> v.trim()).collect(java.util.stream.Collectors.toList());\n\t\t")).output(mark("owner", "firstLowerCase")).output(literal(".")).output(mark("name", "firstLowerCase")).output(literal(" = t.value() == null ? null : ")).output(mark("struct", "call")).output(literal(";\n\t}\n});")),
			rule().condition((type("word")), (trigger("worddeclaration"))).output(literal("public enum ")).output(mark("name", "firstUpperCase")).output(literal(" { ")).output(mark("value").multiple(", ")).output(literal("}")),
			rule().condition((type("struct")), (trigger("field"))).output(literal("protected ")).output(mark("package")).output(literal(".structs.")).output(mark("struct", "structName")).output(literal(" ")).output(mark("name", "firstLowerCase")).output(expression().output(literal(" = ")).output(mark("defaultValue"))).output(literal(";")),
			rule().condition(not(type("entity")), (trigger("field"))).output(literal("protected ")).output(mark("type")).output(literal(" ")).output(mark("name", "firstLowerCase")).output(expression().output(literal(" = ")).output(mark("defaultValue"))).output(literal(";")),
			rule().condition((type("word")), (trigger("defaultvalue"))).output(mark("type")).output(literal(".")).output(mark("value")),
			rule().condition((trigger("defaultvalue"))).output(mark("value")),
			rule().condition((type("struct")), (trigger("getter"))).output(literal("public ")).output(mark("package")).output(literal(".structs.")).output(mark("struct", "structName")).output(literal(" ")).output(mark("name", "firstLowerCase")).output(literal("() {\n\treturn this.")).output(mark("name", "firstLowerCase")).output(literal(";\n}")),
			rule().condition((type("entity")), (trigger("getter"))).output(literal("public ")).output(mark("entity", "firstUpperCase")).output(literal(" ")).output(mark("name", "firstLowerCase")).output(literal("() {\n\treturn master.")).output(mark("entity", "firstLowerCase")).output(literal("(attributes.get(\"")).output(mark("name", "firstLowerCase")).output(literal("\"));\n}")),
			rule().condition((trigger("getter"))).output(literal("public ")).output(mark("type")).output(literal(" ")).output(mark("name", "firstLowerCase")).output(literal("() {\n\treturn ")).output(mark("name", "firstLowerCase")).output(literal(";\n}")),
			rule().condition((trigger("abstract"))).output(literal("Abstract")),
			rule().condition((trigger("structname"))).output(mark("name", "firstUpperCase")),
			rule().condition((trigger("call"))).output(literal("new ")).output(mark("package")).output(literal(".structs.")).output(mark("name", "firstUpperCase")).output(literal("(")).output(mark("attribute", "parse").multiple(", ")).output(literal(")")),
			rule().condition((type("boolean")), (trigger("parse"))).output(literal("Boolean.parseBoolean(values.get(")).output(mark("index")).output(literal("))")),
			rule().condition((type("int")), (trigger("parse"))).output(literal("Integer.parseInt(values.get(")).output(mark("index")).output(literal("))")),
			rule().condition((type("double")), (trigger("parse"))).output(literal("Double.parseDouble(values.get(")).output(mark("index")).output(literal("))")),
			rule().condition((trigger("parse"))).output(literal("values.get(")).output(mark("index")).output(literal(")"))
		);
	}
}